// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ----- //
// blink //
// ----- //

#define blink_wrap_target 0
#define blink_wrap 7
#define blink_pio_version 1

static const uint16_t blink_program_instructions[] = {
            //     .wrap_target
    0xff01, //  0: set    pins, 1                [31]
    0x4003, //  1: in     pins, 3
    0xff02, //  2: set    pins, 2                [31]
    0x4003, //  3: in     pins, 3
    0xff04, //  4: set    pins, 4                [31]
    0x4003, //  5: in     pins, 3
    0x8020, //  6: push   block
    0x0000, //  7: jmp    0
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program blink_program = {
    .instructions = blink_program_instructions,
    .length = 8,
    .origin = -1,
    .pio_version = blink_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config blink_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + blink_wrap_target, offset + blink_wrap);
    return c;
}

static inline void blink_program_init(PIO pio, uint sm, uint offset,uint set_pin,uint in_pin,uint freq){
	pio_sm_config c = blink_program_get_default_config(offset);
	sm_config_set_set_pins(&c, set_pin , 3);
	pio_gpio_init(pio,set_pin);
	pio_gpio_init(pio,set_pin+1);
	pio_gpio_init(pio,set_pin+2);
	pio_sm_set_consecutive_pindirs(pio,sm,set_pin,3,true);
	sm_config_set_in_pins(&c,in_pin);
	sm_config_set_in_pin_count(&c,3);
	pio_sm_set_consecutive_pindirs(pio,sm,in_pin,3,false);
	pio_gpio_init(pio,in_pin);	
	pio_gpio_init(pio,in_pin+1);	
	pio_gpio_init(pio,in_pin+2);	
	sm_config_set_in_shift(&c,0,0,32);
	float div = clock_get_hz(clk_sys)/freq;
	sm_config_set_clkdiv(&c, div);
	pio_sm_init(pio,sm,offset,&c);
	pio_sm_set_enabled(pio,sm,true);
}

#endif

